INSTALASI NODE JS DAN GIT (VERSION CONTROL SYSTEM UNTUK MENGELOLA SOURCE CODE YANG DIBUAT)


inisialisasi project menggunakan node js
npm init

instalasi typescript
npm i -D typescript ts-node => perintah ini digunakan untuk melakukan instalasi typescript agar dapat berjalan pada tahap development bukan saat di build dan berjalan di production (build)

Membuat konfigurasi typescript
npx tsc --init => hasilnya akan membuat file tsconfig.json

kalau tidak dapat melakukan npx maka dibuat manual kemudian tambahkan :
1. target (es2016) => mengatur versi dari Bahasa javascript
2. module (commonjs)
3. esModuleInterop (true)
4. noImpliciyAny (true)
5. moduleResolution (node)
6. resolveJsonModule (true) => memungkinkan untuk mengimport file json
7. sourceMap (true)
8. outDir => out directory (mengarahkannya kemana)
9. baseURL
10. paths
11. typeRoots
kemudian tambahkan include (untuk memilih dimana saja menggunakan typescript) dan exclude (file yang tidak akan menggunakan typescript)

buat folder src dan buat file index.ts (file ini akan diakses/dieksekusi)

buat script untuk menjalankan perintah pada terminal untuk menjalankan projek
"start" : "npm tsc -w" => Ketika projek telah selesai di build
"dev" : "npx nodemon" => menjalankan nodemon
"build" : "tsc"

Lakukan instalasi nodemon
npm i nodemon

Buat file konfigurasi berupa object dengan nama nodemmon.json
{
"watch" : ["src"],
"ext": "ts",
"exec" : "npx ts-node ./src/index.ts"
}  

jadi Ketika memasukkan perintah dev maka akan membuka file nodemon.json kemudian nodemon akan langsung menjalankan perintah npx ts-node ./src/index.ts maka akan secara otomatis menjalankan file yang ada pada index.ts

lakukan instalasi framework express.js => memiliki fitur yang dapat mempermudah dalam mengembangkan web atau mobile application  (singkatnya untuk membuat sebuah rest API)
npm i express

dikarenakan kita menggunakan express dan typrscript maka dibutuhkan library @types/express agar express dapat langsung suporrt dengan typescript (jadi agar dapat berjalan maka biasanya diperlukan sebuah dependensi dengan cara :
diawali dengan @types/(nama library)
)
npm i -D @types/express


import library pada nodejs (const express = require("express")), namun dikarenakan menggunakan typescript maka cukup import seperti biasa (pada react)


(buat konfigurasi setup server)

lakukan instalasi postman (tools untuk melakukan request ke API)




SETUP GITHUB DAN TESTING BUILD

Buat repository di github

buat file gitignore untuk meng ignore / mempas file atau folder agar tidak di push pada repository GitHub

/namafile => agar tidak di push

1. dependencies => node_module
2. testing => coverage
3. production => build atau dist
4. misc => DS_Store, .package-lock.json

npm run build => digunakan untuk menjalankan envitonment production (membuild atau mengcompile ts menjadi js)
npm run dev => digunakan untuk menjalankan environment developmen


SETUP ESLINT DAN PRETTIER
ESLint => code analyzer yang dapat menemukan masalah atau problem yang ada di dalam code javascript ataupun typescript yang sudah support dengan banyak code editor yang ada

instalasi eslint
instalasi ESLint pada extention di vscode 
inisialisasi eslint pada project => npx eslint --init => To check syntax, find problem and enforce code style
instalasi dependencies => npm i -D @typescript-eslint/eslint-plugin @typescript-eslint/parser eslint eslint-config-standard eslint-plugin-import eslint-plugin-node eslint-plugin-promise eslint-plugin-standard
konfigurasi file eslint => tambahkan parser "@typescript-eslint/parser", hapus override, tambahkan plugins ["@typescript-eslint"], tambahkan ignorePatterns ["**/build/*", "**node_module/*", "**/public/* "]

ignorePatterns => digunakan agar eslint tidak akan membaca folder atau file di dalamnya 

Prettier => code formatter untuk mempermudah dalam penulisan code dalam typescript

Instalasi Prettier
Instalasi Prettier pada extention di vscode
instalasi dependencies => npm i --save-dev --save-exact prettier
buat file .prettierrc untuk melakukan konfigurasi
buat object yang berisi :

{
	"arrowParents": "always",
	"printWidth": 120,
	"semi": false, => bisa tanpa titik koma
	"singleQuote": true,
	"trailingComma": "none"
}  

Kemudian masuk preferences => setting => search "format" => pilih prettier => pada bagian format on paste di ceklis
Kemudian buat file .prettierignore => file yang tidak akan dirapihkan oleh prettier, kemudian masukkan
1. eslintrc.json
2. prettierrc.json
3. package.json
4. package-lock.json
5. tsconfig.json
6. CHANGELOG.md
7. readme.md
6. nodemon.json
7. yarn.lock
8. dist
9. build
10. public
11. node_modules
12. vercel.json

tambahkan pada bagian scripts pada file package.json => "format": "prettier --write"





















































